---
name: PowerShell Linter and Pester Tests
on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh
  
jobs:
  pester-test:
    name: Pester test
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository Code
        uses: actions/checkout@v4

      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v3
        with:
          path: "~/.local/share/powershell/Modules"
          key: "${{ runner.os }}-${{ github.workflow }}"

      - name: Install from PSGallery
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name PSScriptAnalyzer

      - name: Lint with PSScriptAnalyzer
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path *.ps1 -Recurse -OutVariable issues
          $errors = $issues | Where-Object -FilterScript { $_.Severity -eq 'Error' }
          $warnings = $issues | Where-Object -FilterScript {$_.Severity -eq 'Warning' }
          if ($errors) {
            $writeErrorSplat = @{
              Message = "There were $($errors.Count) errors and $($warnings.Count) warnings total."
              Exception = [InvalidOperationException]::new()
              ErrorId = "PowerShell:Lint-InvalidOperationException-1"
              Category = 'InvalidResult'
              TargetObject = $errors
            }
            Write-Error @writeErrorSplat
            throw $writeErrorSplat['Exception']
          } else {
            Write-Host -Object "::notice:: There were $($errors.Count) errors and $($warnings.Count) warnings total." -ForegroundColor 'Green'
          }

      - name: Perform a Pester tests from the Tests.ps1 file
        shell: pwsh
        run: |
          Get-ChildItem -LiteralPath ${{ github.workspace }} -Include '*.tests.ps1' |
            ForEach-Object -Process {
              Invoke-Pester -Path $_.FullName -Verbose -PassThru |
              Export-CliXml -Path ./$_.BaseName.xml
            }

      - name: Upload test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: PowerShell-Ubuntu-Pester-Tests
          path: Unit.Tests.xml
